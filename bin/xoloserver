#!/usr/local/pixar/ruby/bin/ruby

# TEMP
ENV['GEM_PATH'] = "/usr/local/pixar/ruby/aliases/default/lib/ruby/gems:#{ENV['GEM_PATH']}"
require 'pixenv'

# !/usr/bin/env ruby

# Copyright 2024 Pixar
#
#    Licensed under the Apache License, Version 2.0 (the "Apache License")
#    with the following modification; you may not use this file except in
#    compliance with the Apache License and the following modification to it:
#    Section 6. Trademarks. is deleted and replaced with:
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor
#       and its affiliates, except as required to comply with Section 4(c) of
#       the License and to reproduce the content of the NOTICE file.
#
#    You may obtain a copy of the Apache License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the Apache License with the above modification is
#    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied. See the Apache License for the specific
#    language governing permissions and limitations under the Apache License.
#

# frozen_string_literal: true

require 'xolo-server'

# The Server Wrapper App
#####################
class XoloServer

  # include Xolo::Core::Output

  ###########################
  def initialize
    # CLI
    Xolo::Server.parse_cli
    Xolo::Server.debug = Xolo::Server.cli_opts[:debug]
    Xolo::Server.app_env = Xolo::Server.cli_opts[:production] ? Xolo::Server::APP_ENV_PROD : Xolo::Server::APP_ENV_DEV
  end

  ###########################
  def run
    Process.setproctitle Xolo::Server::EXECUTABLE_FILENAME

    # Run the Server
    if Xolo::Server.config_opts.empty?
      Xolo::Server::App.run!

    # Set config
    elsif Xolo::Server.config_opts[:set]
      set_config

    # Show config
    # always --show unless --set
    else
      show_config
    end
  end # run

  ###########################
  def show_config
    puts '# Current Xolo Server Settings:'
    puts '#################################'

    keys_to_display = Xolo::Server.config_opts[:keys_to_display] || Xolo::Server::Configuration::KEYS.keys
    max_key_len = keys_to_display.max_by(&:length).length + 2

    # Display the requested keys
    keys_to_display.each do |k|
      v = Xolo::Server.config_opts[:expand] ? Xolo::Server.config.send(k) : Xolo::Server.config.raw_data[k]
      deets = Xolo::Server::Configuration::KEYS[k]

      v =
        if deets
          '** required but not set' if deets[:required] && v.pix_empty?
        else
          'Unknown Key'
        end

      printf "%-#{max_key_len}s %s\n", "#{k}: ", v
    end # keys_to_display.each
  end

  ###########################
  def set_config
    # puts 'Config opts:'
    # Xolo::Server.config_opts.each do |k, v|
    #   puts "  #{k} (#{k.class}): #{v}"
    # end
    # puts '-------------------------------'

    # raw_data is the data as read from the config file, which is the data we want to save back
    #   after updating the values
    data_to_save = Xolo::Server.config.raw_data.dup

    Xolo::Server::Configuration::KEYS.each do |k, _v|
      next unless Xolo::Server.config_opts.key? "#{k}_given".to_sym

      new_val = Xolo::Server.config_opts[k]
      puts "Setting #{k} to #{new_val}"
      data_to_save[k] = new_val
    end

    Xolo::Server.config.save_to_file(data: data_to_save)
  end

end # class XoloServer

# MAIN
#####################
begin
  app = XoloServer.new
  app.run
rescue => e
  warn "ERROR #{e.class}: #{e}"
  e.backtrace.each { |l| warn "..#{l}" }
end
