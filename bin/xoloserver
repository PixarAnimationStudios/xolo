#!/usr/local/pixar/ruby/bin/ruby

# TEMP
ENV['GEM_PATH'] = "/usr/local/pixar/ruby/aliases/default/lib/ruby/gems:#{ENV['GEM_PATH']}"
require 'pixenv'

# !/usr/bin/env ruby

# Copyright 2024 Pixar
#
#    Licensed under the Apache License, Version 2.0 (the "Apache License")
#    with the following modification; you may not use this file except in
#    compliance with the Apache License and the following modification to it:
#    Section 6. Trademarks. is deleted and replaced with:
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor
#       and its affiliates, except as required to comply with Section 4(c) of
#       the License and to reproduce the content of the NOTICE file.
#
#    You may obtain a copy of the Apache License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the Apache License with the above modification is
#    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied. See the Apache License for the specific
#    language governing permissions and limitations under the Apache License.
#

# frozen_string_literal: true

require 'xolo-server'

# The Server Wrapper App
#####################
class XoloServer

  include Xolo::Core::Output

  def initialize
    # CLI
    Xolo::Server.parse_cli
    Xolo::Server.debug = Xolo::Server.cli_opts[:debug]
    Xolo::Server.app_env = Xolo::Server.cli_opts[:production] ? Xolo::Server::APP_ENV_PROD : Xolo::Server::APP_ENV_DEV
  end

  def run
    Process.setproctitle Xolo::Server::EXECUTABLE_FILENAME

    # TESTING
    # puts '##############################'
    # puts Gem.ruby
    # Xolo::Server.config.to_h.each { |k, v| puts "#{k} =>\n  #{v}" }
    # puts '##############################'

    if Xolo::Server.config_opts.to_h.empty?
      Xolo::Server::App.run!

    elsif Xolo::Server.config_opts[:show]
      show_config
    end
  end # run

  #########
  def show_config
    puts '# Current Xolo Server Settings:'
    puts '#################################'
    max_key = Xolo::Server::Configuration::KEYS.keys.max_by(&:length)
    # puts "Max Key: #{max_key}"
    max_key_len = max_key.length + 2
    # puts "Max Key Length: #{max_key_len}"

    Xolo::Server.config.raw_data.each do |k, v|
      printf "%-#{max_key_len}s %s\n", "#{k}: ", v
    end
  end

end # class XoloServer

# MAIN
#####################
begin
  app = XoloServer.new
  app.run
rescue => e
  warn "ERROR #{e.class}: #{e}"
  e.backtrace.each { |l| warn "..#{l}" }
end
