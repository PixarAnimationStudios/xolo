#!/usr/local/pixar/ruby/bin/ruby

# !/usr/bin/env ruby

# Copyright 2025 Pixar
#
#    Licensed under the terms set forth in the LICENSE.txt file available at
#    at the root of this project.
#

# frozen_string_literal: true

require 'xolo-server'

# The Server Wrapper App
#####################
class XoloServer

  # include Xolo::Core::Output

  ###########################
  def initialize
    # CLI
    Xolo::Server.parse_cli
    Xolo::Server.debug = Xolo::Server.cli_opts[:debug]
    Xolo::Server.app_env = Xolo::Server.cli_opts[:production] ? Xolo::Server::APP_ENV_PROD : Xolo::Server::APP_ENV_DEV
  end

  ###########################
  def run
    Process.setproctitle Xolo::Server::EXECUTABLE_FILENAME

    # Run the Server
    if Xolo::Server.config_opts.empty?
      Xolo::Server.logger.info "Starting version #{Xolo::VERSION} in #{Xolo::Server.app_env} mode"
      Xolo::Server::App.run!

    # Set config
    elsif Xolo::Server.config_opts[:set]
      set_config

    # Show config
    # always --show unless --set
    else
      show_config
    end
  end # run

  ###########################
  def show_config
    puts '# Current Xolo Server Settings:'
    puts '#################################'

    keys_to_display = Xolo::Server.config_opts[:keys_to_display] || Xolo::Server::Configuration::KEYS.keys
    max_key_len = keys_to_display.max_by(&:length).length + 2

    # Display the requested keys
    keys_to_display.each do |k|
      deets = Xolo::Server::Configuration::KEYS[k]

      v = Xolo::Server.config_opts[:expand] ? Xolo::Server.config.send(k) : Xolo::Server.config.raw_data[k]

      if v.pix_empty?
        if deets
          '** required but not set' if deets[:required]
        else
          'Unknown Key'
        end
      end

      printf "%-#{max_key_len}s %s\n", "#{k}: ", v
    end # keys_to_display.each
  end

  ###########################
  def set_config
    # puts 'Config opts:'
    # Xolo::Server.config_opts.each do |k, v|
    #   puts "  #{k} (#{k.class}): #{v}"
    # end
    # puts '-------------------------------'

    # raw_data is the data as read from the config file, which is the data we want to save back
    #   after updating the values
    data_to_save = Xolo::Server.config.raw_data.dup

    Xolo::Server::Configuration::KEYS.each_key do |k|
      next unless Xolo::Server.config_opts.key? "#{k}_given".to_sym

      new_val = Xolo::Server.config_opts[k]
      puts "Setting #{k} to #{new_val}"
      data_to_save[k] = new_val
    end

    Xolo::Server.config.save_to_file(data: data_to_save)
  end

end # class XoloServer

# MAIN
#####################
begin
  app = XoloServer.new
  app.run
rescue => e
  warn "ERROR #{e.class.name.split('::').last}: #{e}"
  e.backtrace.each { |l| warn "..#{l}" }
end
