#!/usr/bin/env ruby

# Copyright 2023 Pixar
#
#    Licensed under the Apache License, Version 2.0 (the "Apache License")
#    with the following modification; you may not use this file except in
#    compliance with the Apache License and the following modification to it:
#    Section 6. Trademarks. is deleted and replaced with:
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor
#       and its affiliates, except as required to comply with Section 4(c) of
#       the License and to reproduce the content of the NOTICE file.
#
#    You may obtain a copy of the Apache License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the Apache License with the above modification is
#    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied. See the Apache License for the specific
#    language governing permissions and limitations under the Apache License.
#

# frozen_string_literal: true

require 'xolo-server'

# The App
#####################
class XoloServer

  def initialize
    Xolo::Server.executable = __FILE__

    # defaults
    Xolo::Server.run_mode = :development
    Xolo::Server.debug = true

    # CLI
    Xolo::Server.parse_cli
  end

  def run
    Process.setproctitle Xolo::Server.executable.basename

    Xolo::Server.run
  end # run

end # class XoloServer

# MAIN
#####################
begin
  # default to development mode
  sinatra_env_mode = 'development'

  # if --debug is given anywhere
  debug = ARGV.delete '--debug'
  if debug
    # move it to the front of ARGV which is where Optimist expects it
    ARGV.unshift debug
    Xolo::Server.debug = true
    # and set the env so sinatra knows we're in dev mode
    sinatra_env_mode = ''
  end

  ENV['APP_ENV'] = sinatra_env_mode
  app = XoloServer.new
  app.run
rescue => e
  warn "ERROR #{e.class}: #{e}"
  e.backtrace.each { |l| warn "..#{l}" }
end
