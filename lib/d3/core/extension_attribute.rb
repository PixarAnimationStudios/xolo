# Copyright 2018 Pixar
#
#    Licensed under the Apache License, Version 2.0 (the "Apache License")
#    with the following modification; you may not use this file except in
#    compliance with the Apache License and the following modification to it:
#    Section 6. Trademarks. is deleted and replaced with:
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor
#       and its affiliates, except as required to comply with Section 4(c) of
#       the License and to reproduce the content of the NOTICE file.
#
#    You may obtain a copy of the Apache License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the Apache License with the above modification is
#    distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied. See the Apache License for the specific
#    language governing permissions and limitations under the Apache License.
#
#

module D3

  # A PatchManagement Extension Attribute.
  #
  # This defines a script-based extension attribute to be used in Patch
  # Policy eligibility scoping.
  #
  # It is similar to a regular ComputerExtensionAttribute, but the data is
  # used behind the scenes by the JSS to calculate patch eligibility.
  #
  # If a title includes any of these, they must be approved by a JamfPro
  # admin in the web ui before they will be activated.
  #
  class ExtensionAttribute

    SHEBANG = '#!'.freeze

    # all D3::ExtensionAttribute names in d3
    # TODO: This...
    def self.all_names
      []
    end

    # @return [String] the unique name of this extension attribute.
    #   Must be unique in both D3::ExtensionAttribute.all_names
    #   and  JSS::ComputerExtensionAttribute.all_names
    attr_reader :name

    # @return [String] A more human readable name
    attr_reader :display_name

    # @return [String] the script to be executed. Like a normal script-generated
    #   JSS::ComputerExtensionAttribute, it must generate a string value
    #   inside <result></result> tags on stdout.
    attr_reader :b64code

    # @param name[String] the unique name of the EA
    # @param display_name [String] the display name of the EA
    # @param code [String] the script contents of the EA
    #
    # @param from_json[Hash] the hash generated by #json_data to recreate
    #   an instance to or from server or client. If provided, other params
    #   are ignored.
    #
    def initialize(name: nil, display_name: nil, code: nil, from_json: nil)
      if from_json
        @name = from_json[:name]
        @display_name = from_json[:display_name]
        @b64code = from_json[:code]
        return
      end
      validate_name name
      @name = name
      @display_name = display_name ? display_name : name
      validate_code code
      @b64code = Base64.encode64(code)
    end

    def name=(new_name)
      return if name == new_name
      validate_name new_name
      @name = new_name
      @need_to_update = true
    end

    def display_name=(new_name)
      return if display_name == new_name
      JSS::Validate.non_empty_string new_name, 'Name must be a non-empty String'
      @display_name = new_name
      @need_to_update = true
    end

    def code
      return nil if @b64code.to_s.empty
      Base64.decode64 @b64code
    end

    def code=(new_code)
      new_code64 = Base64.encode64 new_code
      return if b64code == new_code64
      validate_code new_code
      @b64code = new_code64
      @need_to_update = true
    end

    def validate_name(this_name)
      JSS::Validate.non_empty_string this_name, 'Name must be a non-empty String'
      # TODO: validate this is unique in d3 - need a server route
      # when the jss gets this EA it must do something to prevent name clashes
    end

    def validate_code(this_code)
      JSS::Validate.non_empty_string this_code, 'Code must be a non-empty String'
      raise JSS::InvalidDataError, 'Code must be a script starting with #!' unless this_code.start_with? SHEBANG
    end

    # used in Title#to_json to pass between d3 server and clients
    def json_data
      {
        name: @name,
        code: @b64code,
        display_name: @display_name
      }
    end

    # used by the D3 PatchSource to pass to the JSS
    def patch_source_data
      {
        key: @name,
        value: @b64code,
        displayName: @display_name
      }
    end

  end # class ExtensionAttribute

end # module D3
